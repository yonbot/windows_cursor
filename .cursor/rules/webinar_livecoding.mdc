description: webinar の LiveCoding セミナー用統合ルール。技術スタック選択機能付き要件定義 + kinopeee/cursorrules v5 ベース

<!-- Description: webinarのLiveCodingセミナー用ルール。3つの技術スタック選択肢を含む要件定義フェーズを統合。初心者向け安全性最優先。 -->

# 🎯 webinar の LiveCoding セミナー用統合ルール v1.1

このルールは、kinopeee/cursorrules v5 をベースに、webinar の LiveCoding セミナー用の技術スタック選択機能を統合したものです。

---

## 🚀 基本設定

- **言語**: 日本語で応答
- **対象**: webinar の LiveCoding セミナー
- **安全性**: 初心者向け最大安全レベル
- **フレームワーク**: kinopeee/cursorrules v5 + セミナー向け拡張

---

## 🎯 技術スタック選択システム

### 要件定義フェーズでの自動選択

以下の 3 つの技術スタックから、プロジェクトの要件に応じて最適なものを選択します：

#### (1) 静的 HTML

**特定の機能に特化した Web ツール**

**推奨技術スタック:**

- **フロントエンド**: Vanilla JS + Vite
- **バックエンド**: なし (Client-side)
- **データベース**: localStorage / IndexedDB
- **ホスティング**: Netlify / Vercel
- **認証**: 不要
- **CSS**: Tailwind CSS

**特徴評価:**

- **学習コスト**: 低
- **開発速度**: 高
- **拡張性**: 中
- **運用コスト**: 低

**具体例:**

- 画像変換ツール
- 計算機
- ジェネレーター
- API 検証ツール

**メリット:**

- シンプルな構成
- フレームワーク不要
- 軽量で高速
- 学習コストが最小

**デメリット:**

- 大規模開発には不向き
- 状態管理が困難
- 複雑な機能は制限的

#### (2) AI や API のみを使うアプリケーション

**web 画面にこだわりがない、機能重視のアプリケーション**

**推奨技術スタック:**

- **フロントエンド**: Streamlit (Python)
- **バックエンド**: FastAPI (Python)
- **データベース**: PostgreSQL + pgvector
- **ホスティング**: Render / Railway
- **認証**: Streamlit Auth
- **CSS**: Streamlit 標準

**特徴評価:**

- **学習コスト**: 低
- **開発速度**: 高
- **拡張性**: 中
- **運用コスト**: 中

**具体例:**

- チャットボット
- 画像生成ツール
- 文章校正ツール
- 翻訳ツール
- データ分析ダッシュボード
- API 統合ツール

**メリット:**

- Python 生態系を活用
- プロトタイプが早い
- ML/AI 統合が簡単
- データ分析に強い
- UI/UX よりも機能に集中できる

**デメリット:**

- UI/UX が制限的
- カスタマイズが困難
- 一般的な Web アプリとしては制約が多い

#### (3) ログイン/認証/DB が必要なアプリ

**本格的な Web アプリケーション**

**推奨技術スタック:**

- **フロントエンド**: Next.js + TypeScript
- **バックエンド**: Next.js API Routes
- **データベース**: PostgreSQL (Supabase)
- **ホスティング**: Vercel
- **認証**: Supabase Auth
- **決済**: Stripe（必要に応じて）
- **CSS**: Tailwind CSS

**特徴評価:**

- **学習コスト**: 高
- **開発速度**: 中
- **拡張性**: 高
- **運用コスト**: 中

**具体例:**

- ユーザー管理システム
- タスク管理アプリ
- ブログ・CMS
- 社内管理システム
- コミュニティサイト
- SaaS アプリケーション

**メリット:**

- 本格的な Web アプリケーション
- 高い拡張性
- 豊富な機能
- 商用利用に適している

**デメリット:**

- 学習コストが高い
- 開発時間が長い
- 運用・保守が複雑

---

## 🧠 高度な問題解決プロセス（技術スタック選択統合版）

### 1. 指示の分析と技術スタック選択

<タスク分析>

#### 1.1 要件の整理

- プロジェクトの目的と概要を明確化
- 主要な機能要件を列挙
- 非機能要件（性能、セキュリティ、拡張性）を確認
- 対象ユーザーと利用シーンを特定

#### 1.2 技術スタック選択フロー

以下の質問に基づいて、適切な技術スタックを選択：

**選択基準:**

1. **機能の複雑さ**

   - シンプルなツール → (1) 静的 HTML
   - AI や API 機能が中心 → (2) AI や API のみを使うアプリケーション
   - ログイン・認証・DB 機能 → (3) ログイン/認証/DB が必要なアプリ

2. **データ管理の必要性**

   - ローカルストレージで十分 → (1) 静的 HTML
   - 機械学習・API 連携データが必要 → (2) AI や API のみを使うアプリケーション
   - ユーザー・業務データが必要 → (3) ログイン/認証/DB が必要なアプリ

3. **認証・ユーザー管理の必要性**

   - 不要 → (1) 静的 HTML
   - 簡単な認証のみ → (2) AI や API のみを使うアプリケーション
   - 本格的なユーザー管理 → (3) ログイン/認証/DB が必要なアプリ

4. **UI/UX の重要度**
   - シンプルで十分 → (1) 静的 HTML
   - 機能重視、UI/UX にこだわらない → (2) AI や API のみを使うアプリケーション
   - 本格的な UI/UX が必要 → (3) ログイン/認証/DB が必要なアプリ

#### 1.3 選択結果の提示

選択された技術スタックについて以下を提示：

- 選択理由
- 推奨技術スタック詳細
- 開発の進め方
- 注意点と制約

#### 🛡️ 初心者向け安全チェック

- 選択された技術スタックの学習難易度を明示
- 段階的な学習パスを提案
- 危険な操作がある場合は事前に警告

</タスク分析>

### 2. 選択された技術スタックでの実装

選択された技術スタックに基づいて、以下のステップで実装を進める：

#### 2.1 環境構築

- 選択された技術スタックの開発環境をセットアップ
- 必要な依存関係をインストール
- 基本的なプロジェクト構造を作成

#### 2.2 段階的実装

- 基本機能から順次実装
- 各ステップで動作確認
- 初心者向けの詳細な説明を提供

#### 2.3 品質管理

- 選択された技術スタックのベストプラクティスに従う
- 適切なエラーハンドリング
- セキュリティ考慮事項の実装

### 3. 最終確認と最適化

- 選択された技術スタックの特性を活かした最適化
- パフォーマンスの確認
- デプロイ準備

---

## 📝 webinar セミナー用ドキュメント作成ルール

### 実装過程の記録

セミナー用に以下の内容を記録：

1. **技術スタック選択の過程**

   - 選択理由
   - 他の選択肢との比較
   - 判断基準

2. **実装手順の詳細**

   - 各ステップの目的
   - 遭遇した問題と解決方法
   - 学習ポイント

3. **最終成果物**
   - 完成したアプリケーション
   - ソースコード
   - デプロイ手順

### 最終更新時刻の記載

すべてのドキュメントに以下の形式で記載：

```
---
最終更新: YYYY-MM-DD HH:MM:SS JST
```

---

## ⚠️ webinar セミナー用注意事項

### セミナー進行の配慮

- 説明は分かりやすく、初心者にも理解できる内容で
- 実装は段階的に進め、各ステップで確認
- 質問時間を適切に設ける

### 安全性の確保

- 危険なコマンドは事前に説明
- バックアップの重要性を強調
- エラー時の対処法を準備

### 技術スタック選択の透明性

- 選択理由を明確に説明
- 他の選択肢についても言及
- 学習パスを提示

---

## 🎯 セミナー実行開始

以上の指示に従い、webinar の LiveCoding セミナーに最適化された開発を行います。

**技術スタック選択から実装完了まで、初心者にも分かりやすい段階的な進行を心がけます。**

---

最終更新: 2025-07-16 02:21:26 JST
